#!/bin/bash

userName="Jorge Paravicini"
orgName="Otchi Org"
nameSpace="otchi_ebml"
creationDate=$(date +%F)
creationYear=$(date +%Y)

unset typeChar
while [[ ! ${typeChar} =~ ^['iuds8Dmb']+$ ]]; do
  echo "Please enter in the type character(i/u/d/s/8/D/m/b):"
  read -r typeChar
done

header="\"otchi_ebml/elements/ebml_element_"

case "${typeChar}" in
"i")
  type="kSInt"
  header+="int.h"
  ;;
"u")
  type="kUInt"
  header+="uint.h"
  ;;
"d")
  type="kDouble"
  header+="double.h"
  ;;
"s")
  type="kString"
  header+="string.h"
  ;;
"8")
  type="kUTF8"
  header+="utf8.h"
  ;;
"D")
  type="kDate"
  header+="date.h"
  ;;
"m")
  type="kMaster"
  header+="master.h"
  ;;
"b")
  type="kBinary"
  header+="master.h"
  ;;
esac

header+="\""

read -r -p "Enter the file name: " fileName
read -r -p "Enter the tag name: " tagName
read -r -p "Enter the id as it should appear: " id
read -r -p "Enter the path: " path
read -r -p "Enter the min occurs: " minOccurs
read -r -p "Enter the max occurs: " maxOccurs
read -r -p "Enter the description: " description

headerGuard="INCLUDE_OTCHI_EBML_${fileName^^}_H"

file="include/otchi_ebml/tags/${fileName}.h"
touch "${file}"

{
  echo "//
// Created by $userName on $creationDate
// Copyright (c) $creationYear $orgName. All rights reserved.
//

#ifndef $headerGuard
#define $headerGuard

#include $header

namespace $nameSpace {

    constexpr EBMLId $tagName = $id;

    class $tagName : public EBMLElement<EBMLType::$type> {
    public:
        using EBMLElement<EBMLType::$type>::EBMLElement;

        [[nodiscard]] std::string getName() const override {
            return $tagName;
        }

        [[nodiscard]] EBMLId getId() const override {
            return $tagName;
        }

        [[nodiscard]] EBMLPath getPath() const override {
            return EBMLPath(\"$path\");
        }

        [[nodiscard]] int minOccurs() const override {
            return $minOccurs;
        }

        [[nodiscard]] std::optional<int> maxOccurs() const override {
            return $maxOccurs
        }

        [[nodiscard]] std::string getDescription() const override {
            return $description
        }
    };

    class ${tagName}Factory : public IEBMLElementFactory {
    public:
        EBMLBaseElement *create(EBMLSize, idSize, EBMLSize dataSize, EBMLSize dataContentSize,
                                EBMLPosition position) override {
            return new ${tagName}(idSize, dataSize, dataContentSize, position);
        }
    };
}

#endif //$headerGuard
"
}>>"${file}"
